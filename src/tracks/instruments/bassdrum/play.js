/* Generated by the Nim Compiler v2.0.4 */
var framePtr = null;
var excHandler = 0;
var lastJSError = null;
var NTI33554449 = {size: 0,kind: 28,base: null,node: null,finalizer: null};

function toJSStr(s_33556901) {
  var result_33556902 = null;

    var res_33556943 = newSeq_33556919((s_33556901).length);
    var i_33556944 = 0;
    var j_33556945 = 0;
    Label1: {
        Label2: while (true) {
        if (!(i_33556944 < (s_33556901).length)) break Label2;
          var c_33556946 = s_33556901[i_33556944];
          if ((c_33556946 < 128)) {
          res_33556943[j_33556945] = String.fromCharCode(c_33556946);
          i_33556944 += 1;
          }
          else {
            var helper_33556959 = newSeq_33556919(0);
            Label3: {
                Label4: while (true) {
                if (!true) break Label4;
                  var code_33556960 = c_33556946.toString(16);
                  if ((((code_33556960) == null ? 0 : (code_33556960).length) == 1)) {
                  helper_33556959.push("%0");;
                  }
                  else {
                  helper_33556959.push("%");;
                  }
                  
                  helper_33556959.push(code_33556960);;
                  i_33556944 += 1;
                  if ((((s_33556901).length <= i_33556944) || (s_33556901[i_33556944] < 128))) {
                  break Label3;
                  }
                  
                  c_33556946 = s_33556901[i_33556944];
                }
            };
++excHandler;
            try {
            res_33556943[j_33556945] = decodeURIComponent(helper_33556959.join(""));
--excHandler;
} catch (EXCEPTION) {
 var prevJSError = lastJSError;
 lastJSError = EXCEPTION;
 --excHandler;
            res_33556943[j_33556945] = helper_33556959.join("");
            lastJSError = prevJSError;
            } finally {
            }
          }
          
          j_33556945 += 1;
        }
    };
    if (res_33556943.length < j_33556945) { for (var i = res_33556943.length ; i < j_33556945 ; ++i) res_33556943.push(null); }
               else { res_33556943.length = j_33556945; };
    result_33556902 = res_33556943.join("");

  return result_33556902;

}

function rawEcho() {
          var buf = "";
      for (var i = 0; i < arguments.length; ++i) {
        buf += toJSStr(arguments[i]);
      }
      console.log(buf);
    

  
}

function setConstr() {
        var result = {};
    for (var i = 0; i < arguments.length; ++i) {
      var x = arguments[i];
      if (typeof(x) == "object") {
        for (var j = x[0]; j <= x[1]; ++j) {
          result[j] = true;
        }
      } else {
        result[x] = true;
      }
    }
    return result;
  

  
}
var ConstSet1 = setConstr(17, 16, 4, 18, 27, 19, 23, 22, 21);

function nimCopy(dest_33557268, src_33557269, ti_33557270) {
  var result_33557279 = null;

    switch (ti_33557270.kind) {
    case 21:
    case 22:
    case 23:
    case 5:
      if (!(isFatPointer_33557259(ti_33557270))) {
      result_33557279 = src_33557269;
      }
      else {
        result_33557279 = [src_33557269[0], src_33557269[1]];
      }
      
      break;
    case 19:
            if (dest_33557268 === null || dest_33557268 === undefined) {
        dest_33557268 = {};
      }
      else {
        for (var key in dest_33557268) { delete dest_33557268[key]; }
      }
      for (var key in src_33557269) { dest_33557268[key] = src_33557269[key]; }
      result_33557279 = dest_33557268;
    
      break;
    case 18:
    case 17:
      if (!((ti_33557270.base == null))) {
      result_33557279 = nimCopy(dest_33557268, src_33557269, ti_33557270.base);
      }
      else {
      if ((ti_33557270.kind == 17)) {
      result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {m_type: ti_33557270} : dest_33557268;
      }
      else {
        result_33557279 = (dest_33557268 === null || dest_33557268 === undefined) ? {} : dest_33557268;
      }
      }
      nimCopyAux(result_33557279, src_33557269, ti_33557270.node);
      break;
    case 4:
    case 16:
            if(ArrayBuffer.isView(src_33557269)) { 
        if(dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new src_33557269.constructor(src_33557269);
        } else {
          dest_33557268.set(src_33557269, 0);
        }
        result_33557279 = dest_33557268;
      } else {
        if (src_33557269 === null) {
          result_33557279 = null;
        }
        else {
          if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
            dest_33557268 = new Array(src_33557269.length);
          }
          result_33557279 = dest_33557268;
          for (var i = 0; i < src_33557269.length; ++i) {
            result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
          }
        }
      }
    
      break;
    case 24:
    case 27:
            if (src_33557269 === null) {
        result_33557279 = null;
      }
      else {
        if (dest_33557268 === null || dest_33557268 === undefined || dest_33557268.length != src_33557269.length) {
          dest_33557268 = new Array(src_33557269.length);
        }
        result_33557279 = dest_33557268;
        for (var i = 0; i < src_33557269.length; ++i) {
          result_33557279[i] = nimCopy(result_33557279[i], src_33557269[i], ti_33557270.base);
        }
      }
    
      break;
    case 28:
            if (src_33557269 !== null) {
        result_33557279 = src_33557269.slice(0);
      }
    
      break;
    default: 
      result_33557279 = src_33557269;
      break;
    }

  return result_33557279;

}
import { el } from "@elemaudio/core" 

function newSeq_33556919(len_33556921) {
  var result_33556922 = [];

    result_33556922 = new Array(len_33556921); for (var i = 0 ; i < len_33556921 ; ++i) { result_33556922[i] = null; }
  return result_33556922;

}

function isFatPointer_33557259(ti_33557260) {
  var result_33557261 = false;

  BeforeRet: {
    result_33557261 = !((ConstSet1[ti_33557260.base.kind] != undefined));
    break BeforeRet;
  };

  return result_33557261;

}

function nimCopyAux(dest_33557272, src_33557273, n_33557274) {
    switch (n_33557274.kind) {
    case 0:
      break;
    case 1:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
    
      break;
    case 2:
          for (var i = 0; i < n_33557274.sons.length; i++) {
      nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i]);
    }
    
      break;
    case 3:
            dest_33557272[n_33557274.offset] = nimCopy(dest_33557272[n_33557274.offset], src_33557273[n_33557274.offset], n_33557274.typ);
      for (var i = 0; i < n_33557274.sons.length; ++i) {
        nimCopyAux(dest_33557272, src_33557273, n_33557274.sons[i][1]);
      }
    
      break;
    }

  
}

function add_33556373(x_33556374, x_33556374_Idx, y_33556375) {
          if (x_33556374[x_33556374_Idx] === null) { x_33556374[x_33556374_Idx] = []; }
      var off = x_33556374[x_33556374_Idx].length;
      x_33556374[x_33556374_Idx].length += y_33556375.length;
      for (var i = 0; i < y_33556375.length; ++i) {
        x_33556374[x_33556374_Idx][off+i] = y_33556375.charCodeAt(i);
      }
    

  
}

function nimFloatToString_385876129(a_385876130) {
  var result_385876131 = null;

        function nimOnlyDigitsOrMinus(n) {
      return n.toString().match(/^-?\d+$/);
    }
    if (Number.isSafeInteger(a_385876130))
      result_385876131 = a_385876130 === 0 && 1 / a_385876130 < 0 ? "-0.0" : a_385876130+".0"
    else {
      result_385876131 = a_385876130+""
      if(nimOnlyDigitsOrMinus(result_385876131)){
        result_385876131 = a_385876130+".0"
      }
    }
  

  return result_385876131;

}

function addFloat_33557563(result_33557565, result_33557565_Idx, x_33557566) {
    add_33556373(result_33557565, result_33557565_Idx, nimFloatToString_385876129(x_33557566));

  
}

function addQuoted_536871059(s_536871061, s_536871061_Idx, x_536871062) {
    addFloat_33557563(s_536871061, s_536871061_Idx, x_536871062);

  
}

function collectionToString_536871021(x_536871023, prefix_536871024, separator_536871025, suffix_536871026) {
  var result_536871027 = [[]];

    result_536871027[0] = nimCopy(null, prefix_536871024, NTI33554449);
    var firstElement_536871028 = true;
    Label1: {
      var value_536871055 = 0.0;
      var i_536871076 = 0;
      Label2: {
          Label3: while (true) {
          if (!true) break Label3;
            value_536871055 = x_536871023[i_536871076];
            if (firstElement_536871028) {
            firstElement_536871028 = false;
            }
            else {
            result_536871027[0].push.apply(result_536871027[0], separator_536871025);;
            }
            
            addQuoted_536871059(result_536871027, 0, value_536871055);
            if ((4 <= i_536871076)) {
            break Label2;
            }
            
            i_536871076 += 1;
          }
      };
    };
    result_536871027[0].push.apply(result_536871027[0], suffix_536871026);;

  return result_536871027[0];

}

function HEX24_536871016(x_536871019) {
  var result_536871020 = [];

    result_536871020 = nimCopy(null, collectionToString_536871021(x_536871019, [91], [44,32], [93]), NTI33554449);

  return result_536871020;

}

function HEX40_671088648(val_671088649, key_671088650) {
  var result_671088651 = null;

    result_671088651 = el.const({value: val_671088649, key: toJSStr(key_671088650)});

  return result_671088651;

}

function highpass_671088800(sig_671088801, fq_671088802, q_671088803) {
  var result_671088804 = null;

    return el.highpass(fq_671088802, q_671088803, sig_671088801)

  return result_671088804;

}

function lowpass_671088795(sig_671088796, fq_671088797, q_671088798) {
  var result_671088799 = null;

    return el.lowpass(fq_671088797, q_671088798, sig_671088796)

  return result_671088799;

}

function bassdrum_536870914(gate_536870915) {
  var result_536870916 = null;

    var duration_536870917 = el.const({value: 0.9});
    var noiseDuration_536870918 = el.const({value: 0.01});
    var env_536870919 = el.adsr(el.const({value: 0.01}), duration_536870917, el.const({value: 0.0}), duration_536870917, gate_536870915);
    var envNoise_536870920 = el.adsr(el.const({value: 0.01}), noiseDuration_536870918, el.const({value: 0.0}), noiseDuration_536870918, gate_536870915);
    var fq_536870921 = el.add(22.5, el.mul(env_536870919, 90.0));
    var spectrum_536870922 = highpass_671088800(lowpass_671088795(el.cycle(el.add(fq_536870921, el.mul(450.0, el.cycle(45.0)))), el.add(fq_536870921, 45.0), el.const({value: 1.0})), el.const({value: 45.0}), el.const({value: 1.0}));
    var noise_536870923 = highpass_671088800(lowpass_671088795(el.noise(), el.add(800.0, el.mul(8000.0, envNoise_536870920)), el.const({value: 1.0})), el.const({value: 400.0}), el.const({value: 1.0}));
    result_536870916 = el.mul(el.mul(el.add(el.mul(noise_536870923, 0.015), spectrum_536870922), env_536870919), 0.8);

  return result_536870916;

}

function play_536870924(midiNotes_536870925) {
  var result_536870926 = null;

    rawEcho(HEX24_536871016(midiNotes_536870925));
    var note_536871069 = midiNotes_536870925[0];
    var gate_536871070 = 0.0;
    if ((0.0 < note_536871069)) {
    gate_536871070 = 1.0;
    }
    
    var gateNode_536871071 = HEX40_671088648(gate_536871070, [103,97,116,101]);
    result_536870926 = bassdrum_536870914(gateNode_536871071);

  return result_536870926;

}
export {play_536870924 as play}
